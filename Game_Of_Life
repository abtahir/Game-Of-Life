#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include<time.h>

//Stationary Patterns:
int block(int h);
int boat(int h);
int beehive(int h);
int loaf(int h);

//Oscillator Patterns:
int beacon(int h);
int blinker(int h);
int toad(int h);
int pulsar(int h);

//Other Patterns:
int glider(int h);
int lightweightspaceship(int h);
int gosper(int h);
int random(int h);

// Console Controlling Functions:
void curpos(int XPos, int YPos);
void hidecursor();
void consolecolor(int);


//Game Controlling Functions:
void life(int input[][85]); //Modifies array according to rules.
void printboundary(void); //Prints boundary.
void generations(int input[][85], int gen); //Controls number of generations.

											//Start and End Messages.
void start(void);
void end(void);

#define SLEEP 550 //Varible for controlling sleep time of console.
int count; //Variable for printing number of generations.
int cells; //Variable for printing number of live cells in a generation.
int i; //Variable for rows
int j; //Variable for columns.

int p[35][85] = { 0 }; //Main array.

int main()
{
	srand(time(NULL));
	system("mode 121"); //Enlarges the console.
	hidecursor(); //Hides Cursor.

	char counter = 'y'; // variable for getting character to replay the game.
	char back = 0; //Variable used to go back.
	int seed = 1, gen = 1;
	int control; //Variable for controlling Mainscreen.
//For re-playing game.
	start();
	consolecolor(11);
	printf("\nPlease Enter:\n\t1 for Playing Game.\n\t2 for About Group.\n\t3 for Exit.");
	consolecolor(3);
	printf("\nINPUT: ");
	consolecolor(15);
	scanf_s("%d", &control);

	switch (control) //For controlling Main Screen. 
	{
	case 1:
		do {	//Asks user for a seed and number of generations.
		RE:
			system("cls"); curpos(0, 0);
			// PrintS Welcome Message
			consolecolor(13);
			printf("\t\t\t\t%c", 201);
			for (int i = 0; i < 45; i++)
			{
				printf("%c", 205);
			}
			printf("%c", 187); puts("");
			printf("\t\t\t\t%c ******************************************* %c\n", 186, 186);
			printf("\t\t\t\t%c |G| |A| |M| |E|   |O| |F|   |L| |I| |F| |E| %c\n", 186, 186);
			printf("\t\t\t\t%c ******************************************* %c\n", 186, 186);
			printf("\t\t\t\t%c", 200);
			for (int i = 0; i < 45; i++)
			{
				printf("%c", 205);
			}
			printf("%c", 188); puts(""); puts("");
			consolecolor(11);
			printf("\n\n");
			consolecolor(7);
			printf("\nSEEDS:\n");
			printf("\t1 for BLOCK.\n\t2 for BOAT.\n\t3 for LOAF.\n\t4 for BEEHIVE.\n\t5 for BLINKER.\n\t6 for BEACON.\n\t7 for TOAD.");
			printf("\n\t8 for PULSAR.\n\t9 for GLIDER.\n\t10 for LIGHT-WEIGHT SPACESHIP.\n\t11 for GOSPER-GLIDER GUN.\n");
			printf("\t12 for RANDOM SEED.");
			consolecolor(3);
			printf("\n\nPlease Enter a SEED:  ");
			if (seed < 1 || seed > 12)//Telling user that he/she gave wrong input.
			{
				curpos(22, 23);
				consolecolor(12);
				printf("INVALID!");
				Sleep(300);
				curpos(22, 23);
				printf("         ");
			}
			curpos(22, 23);
			consolecolor(7);
			scanf_s("%d", &seed);
		} while (seed < 1 || seed > 12);
		consolecolor(3);
		printf("Enter number of Generations:\t");
		consolecolor(7);
		scanf_s("%d", &gen);
		system("cls");

		switch (seed) //Placing different seeds into main array and running the game.
		{

		case 1:block(gen);
			break;
		case 2:boat(gen);
			break;
		case 3: loaf(gen);
			break;
		case 4:beehive(gen);
			break;
		case 5:blinker(gen);
			break;
		case 6:beacon(gen);
			break;
		case 7:toad(gen);
			break;
		case 8:pulsar(gen);
			break;
		case 9:glider(gen);
			break;
		case 10:lightweightspaceship(gen);
			break;
		case 11:gosper(gen);
			break;
		case 12:random(gen);
			break;

		default:
			system("cls");
			break;
		}

		for (int a = 0; a < 35; a++)//re-initializing main array to zero for re-usage.
		{
			for (int b = 0; b < 85; b++)
				p[a][b] = 0;
		}
		system("cls");
	
		consolecolor(8);

		printf("Do you want to enter another SEED?\n");
		
		printf("Y=Yes || Any Other Character=NO:  ");
		consolecolor(15);
		scanf_s(" %c", &counter);
		if (counter == 'y' || counter == 'Y')
		{
			system("cls");
			goto RE;
		}
		break;
	case 2:
		system("cls");
		consolecolor(13);
		printf("\t\t\t\t%c", 201);
		for (int i = 0; i < 45; i++)
		{
			printf("%c", 205);
		}
		printf("\t\t\t\t%c", 187); puts("");
		printf("\t\t\t\t%c ******************************************* %c\n", 186, 186);
		printf("\t\t\t\t%c |G| |A| |M| |E|   |O| |F|   |L| |I| |F| |E| %c\n", 186, 186);
		printf("\t\t\t\t%c ******************************************* %c\n", 186, 186);
		printf("\t\t\t\t%c", 200);
		for (int i = 0; i < 45; i++)
		{
			printf("%c", 205);
		}
		printf("%c", 188);
		consolecolor(11);
		printf("\n\n|G| |R| |O| |U| |P|   |M| |E| |M| |B| |E| |R| |S|:");
		printf("\n\n 1) Abdullah Bin Tahir.\n 2) Usama Bin Shakil.\n 3) M. Umer Abbasi.");
		consolecolor(15);
		printf("\n\n| A GREAT TEAM IS SOMETHING THAT MONEY CAN'T BUY. |");
		consolecolor(8);
		printf("\n\nEnter any character to RETURN: ");
		consolecolor(15);
		scanf_s(" %c", &back);
		system("cls");
		goto RE; //Going back to main screen.
		break;
	case 3:
		goto END; //Exiting Game.
		break;
	default: //If user inputs wrong number.
		
		curpos(7, 13); 
		consolecolor(12); 
		
			printf("INVALID!");

			Sleep(600);
			system("cls");
		

			goto RE;
		

	}

END: //For ending game.
	system("cls");
	end();
	Sleep(1500);
}

//SEEDS:
//Stationary Patterns:
int block(int gen)
{
	i = rand() % 34;
	j = rand() % 84;
	p[0 + i][0 + j] = 1;
	p[0 + i][1 + j] = 1;
	p[1 + i][1 + j] = 1;
	p[1 + i][0 + j] = 1;
	generations(p, gen);
}
int boat(int gen)
{
	i = rand() % 33;
	j = rand() % 82;
	p[0 + i][0 + j] = 1;
	p[0 + i][1 + j] = 1;
	p[1 + i][0 + j] = 1;
	p[1 + i][3 + j] = 1;
	p[2 + i][2 + j] = 1;
	generations(p, gen);
}
int beehive(int gen)
{
	i = rand() % 33;
	j = rand() % 82;
	p[1 + i][0 + j] = 1;
	p[2 + i][1 + j] = 1;
	p[2 + i][2 + j] = 1;
	p[0 + i][1 + j] = 1;
	p[0 + i][2 + j] = 1;
	p[1 + i][3 + j] = 1;
	generations(p, gen);
}
int loaf(int gen)
{
	i = rand() % 32;
	j = rand() % 82;
	p[1 + i][0 + j] = 1;
	p[0 + i][2 + j] = 1;
	p[0 + i][1 + j] = 1;
	p[2 + i][1 + j] = 1;
	p[3 + i][2 + j] = 1;
	p[1 + i][3 + j] = 1;
	p[2 + i][3 + j] = 1;
	generations(p, gen);
}
//Oscillatory Patterns:
int blinker(int gen)
{
	i = rand() % 33;
	j = rand() % 85;
	p[0 + i][0 + j] = 1;
	p[1 + i][0 + j] = 1;
	p[2 + i][0 + j] = 1;
	generations(p, gen);
}
int beacon(int gen)
{
	i = rand() % 32;
	j = rand() % 82;
	p[0 + i][0 + j] = 1;
	p[0 + i][1 + j] = 1;
	p[1 + i][0 + j] = 1;
	p[2 + i][3 + j] = 1;
	p[3 + i][2 + j] = 1;
	p[3 + i][3 + j] = 1;
	generations(p, gen);
}
int toad(int gen)
{
	i = rand() % 34;
	j = rand() % 82;
	p[0 + i][1 + j] = 1;
	p[0 + i][2 + j] = 1;
	p[0 + i][3 + j] = 1;
	p[1 + i][0 + j] = 1;
	p[1 + i][1 + j] = 1;
	p[1 + i][2 + j] = 1;
	generations(p, gen);
}
int pulsar(int gen)
{
	i = rand() % 21;
	j = rand() % 71;
	p[0 + i][4 + j] = 1;
	p[0 + i][10 + j] = 1;
	p[1 + i][4 + j] = 1;
	p[1 + i][10 + j] = 1;
	p[2 + i][4 + j] = 1;
	p[2 + i][5 + j] = 1;
	p[2 + i][9 + j] = 1;
	p[2 + i][10 + j] = 1;
	p[4 + i][0 + j] = 1;
	p[4 + i][1 + j] = 1;
	p[4 + i][2 + j] = 1;
	p[4 + i][5 + j] = 1;
	p[4 + i][6 + j] = 1;
	p[4 + i][8 + j] = 1;
	p[4 + i][9 + j] = 1;
	p[4 + i][12 + j] = 1;
	p[4 + i][13 + j] = 1;
	p[4 + i][14 + j] = 1;
	p[5 + i][2 + j] = 1;
	p[5 + i][4 + j] = 1;
	p[5 + i][6 + j] = 1;
	p[5 + i][8 + j] = 1;
	p[5 + i][10 + j] = 1;
	p[5 + i][12 + j] = 1;
	p[6 + i][4 + j] = 1;
	p[6 + i][5 + j] = 1;
	p[6 + i][9 + j] = 1;
	p[6 + i][10 + j] = 1;
	p[8 + i][4 + j] = 1;
	p[8 + i][5 + j] = 1;
	p[8 + i][9 + j] = 1;
	p[8 + i][10 + j] = 1;
	p[9 + i][2 + j] = 1;
	p[9 + i][4 + j] = 1;
	p[9 + i][6 + j] = 1;
	p[9 + i][8 + j] = 1;
	p[9 + i][10 + j] = 1;
	p[9 + i][12 + j] = 1;
	p[10 + i][0 + j] = 1;
	p[10 + i][1 + j] = 1;
	p[10 + i][2 + j] = 1;
	p[10 + i][5 + j] = 1;
	p[10 + i][6 + j] = 1;
	p[10 + i][8 + j] = 1;
	p[10 + i][9 + j] = 1;
	p[10 + i][12 + j] = 1;
	p[10 + i][13 + j] = 1;
	p[10 + i][14 + j] = 1;
	p[12 + i][4 + j] = 1;
	p[12 + i][5 + j] = 1;
	p[12 + i][9 + j] = 1;
	p[12 + i][10 + j] = 1;
	p[13 + i][4 + j] = 1;
	p[13 + i][10 + j] = 1;
	p[14 + i][4 + j] = 1;
	p[14 + i][10 + j] = 1;
	generations(p, gen);
}
//Other Patterns:
int glider(int gen)
{
	i = rand() % 33;
	j = rand() % 83;
	p[0 + i][1 + j] = 1;
	p[1 + i][2 + j] = 1;
	p[2 + i][0 + j] = 1;
	p[2 + i][1 + j] = 1;
	p[2 + i][2 + j] = 1;
	generations(p, gen);
}
int lightweightspaceship(int gen)
{
	i = rand() % 32;
	j = rand() % 81;
	p[0 + i][0 + j] = 1;
	p[0 + i][3 + j] = 1;
	p[1 + i][4 + j] = 1;
	p[2 + i][0 + j] = 1;
	p[2 + i][4 + j] = 1;
	p[3 + i][1 + j] = 1;
	p[3 + i][2 + j] = 1;
	p[3 + i][3 + j] = 1;
	p[3 + i][4 + j] = 1;
	generations(p, gen);
}
int gosper(int gen)
{
	i = rand() % 29;
	j = rand() % 50;
	p[4 + i][0 + j] = 1;
	p[5 + i][0 + j] = 1;
	p[4 + i][1 + j] = 1;
	p[5 + i][1 + j] = 1;
	p[0 + i][23 + j] = 1;
	p[0 + i][25 + j] = 1;
	p[2 + i][35 + j] = 1;
	p[3 + i][35 + j] = 1;
	p[2 + i][34 + j] = 1;
	p[3 + i][34 + j] = 1;
	p[10 + i][21 + j] = 1;
	p[9 + i][23 + j] = 1;
	p[10 + i][23 + j] = 1;
	p[11 + i][23 + j] = 1;
	p[11 + i][22 + j] = 1;
	p[5 + i][10 + j] = 1;
	p[4 + i][11 + j] = 1;
	p[5 + i][11 + j] = 1;
	p[6 + i][11 + j] = 1;
	p[3 + i][12 + j] = 1;
	p[4 + i][12 + j] = 1;
	p[5 + i][12 + j] = 1;
	p[6 + i][12 + j] = 1;
	p[7 + i][12 + j] = 1;
	p[2 + i][13 + j] = 1;
	p[3 + i][13 + j] = 1;
	p[7 + i][13 + j] = 1;
	p[8 + i][13 + j] = 1;
	p[3 + i][14 + j] = 1;
	p[4 + i][14 + j] = 1;
	p[5 + i][14 + j] = 1;
	p[6 + i][14 + j] = 1;
	p[7 + i][14 + j] = 1;
	p[7 + i][15 + j] = 1;
	p[3 + i][15 + j] = 1;
	p[4 + i][16 + j] = 1;
	p[6 + i][16 + j] = 1;
	p[5 + i][17 + j] = 1;
	p[3 + i][20 + j] = 1;
	p[1 + i][21 + j] = 1;
	p[2 + i][21 + j] = 1;
	p[4 + i][21 + j] = 1;
	p[5 + i][21 + j] = 1;
	p[0 + i][23 + j] = 1;
	p[6 + i][23 + j] = 1;
	p[0 + i][25 + j] = 1;
	p[1 + i][25 + j] = 1;
	p[3 + i][25 + j] = 1;
	p[5 + i][25 + j] = 1;
	p[6 + i][25 + j] = 1;
	generations(p, gen);
}
int random(int gen) //Initialize main array(p) randomly.
{
	srand(time(NULL)); //Randomizing the seed.
	for (int i = 0; i < 35; i++)
	{
		for (int j = 0; j < 85; j++)
			p[i][j] = rand() % 2;
	}
	generations(p, gen);
}

// Console Controlling Functions:
void curpos(int XPos, int YPos)
{
	COORD Coord;
	Coord.X = XPos;
	Coord.Y = YPos;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Coord);
}
void hidecursor()// Credits for this function http://stackoverflow.com/questions/30126490/how-to-hide-console-cursor-in-c
{
	HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO info;
	info.dwSize = 100;
	info.bVisible = FALSE;
	SetConsoleCursorInfo(consoleHandle, &info);
}
void consolecolor(int c)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole, c);
}

//Game Controlling Functions:
void printboundary(void) //Print boundary.
{

	int i, j;
	curpos(14, 4);
	consolecolor(15);
	printf("%c", 201);
	for (i = 0; i < 85; i++) // Prints upper line of boundary.
		printf("%c", 205);
	printf("%c", 187);
	puts("");
	for (i = 0; i < 35; i++) //Prints right and left side of boundary with array enclosed in it.
	{
		curpos(14, i + 5);
		printf("%c", 186);
		for (j = 0; j < 85; j++)
		{
			printf(" ");

		}
		printf("%c", 186);
		puts("");
	}
	curpos(14, 40);
	printf("%c", 200);
	for (i = 0; i < 85; i++) //Prints lower line of boundary.
		printf("%c", 205);
	printf("%c", 188);

}
void generations(int input[][85], int gen) //Prints generations of main array(input).
{
	printboundary();
	consolecolor(11);
	for (int a = 0; a <= gen; a++)
	{
		cells = 0;
		for (int i = 0; i < 35; i++)
		{
			for (int j = 0; j < 85; j++)
			{
				curpos(j + 15, i + 5); //j=columns on x-axis and i=columns on y-axis.

				p[i][j] == 0 ? printf(" ") : printf("%c", 248);
				if (p[i][j] != 0)
					cells++;
			}
		}

		curpos(16, 41);
		printf("GENERATION: %d   ||   LIVE CELLS: %d", a, cells);
		
		Sleep(SLEEP);
		life(p);
	}
}
void life(int input[][85]) //It gives an array modified according to game rules.
{

	int count;
	int temp[35][85];
	memcpy(temp, input, sizeof(input)); //Copies main array(p) into a temp array so that calculations can be performed on temporary array.

	for (int i = 0; i < 35; i++)
	{
		for (int j = 0; j < 85; j++)
		{
			count = 0;
			//Special cases for specific rows and columns for wrap-around boundary.
			if (i == 0)
			{
				if (j == 0) //Exceptional case for upper left corner.
				{
					count = input[0][84] + input[0][1] + input[1][0] + input[1][1] + input[1][84] +
						input[34][0] + input[34][1] + input[34][84];
				}
				else if (j == 84) //Exceptional case for upper right corner.
				{
					count = input[0][j - 1] + input[0][0] + input[1][j - 1] + input[1][j] + input[1][0] +
						input[34][j - 1] + input[34][j] + input[34][0];

				}
				else //General case for row{[0].
				{
					count = input[0][j - 1] + input[0][j + 1] + input[1][j - 1] + input[1][j] + input[1][j + 1] +
						input[34][j - 1] + input[34][j] + input[34][j + 1];
				}
			}
			else if (i == 34)
			{
				if (j == 0) //Exceptional case for lower left corner.
				{
					count = input[34][1] + input[34][84] + input[33][0] + input[33][1] + input[33][84] +
						input[0][0] + input[0][1] + input[0][84];
				}
				else if (j == 84) //Exceptional case for lower right corner.
				{
					count = input[34][83] + input[34][0] + input[33][83] + input[33][84] + input[33][0] +
						input[0][83] + input[0][84] + input[0][0];
				}
				else // General case for row[34].
				{
					count = input[34][j - 1] + input[34][j + 1] + input[33][j - 1] + input[33][j] + input[33][j + 1] +
						input[0][j - 1] + input[0][j] + input[0][j + 1];
				}
			}
			else if (j == 0)
			{
				//General case for column[0].
				count = input[i - 1][0] + input[i + 1][0] + input[i - 1][1] + input[i][1] + input[i + 1][1] +
					input[i - 1][84] + input[i][84] + input[i + 1][84];
			}
			else if (j == 84)
			{	//General case for column[84].
				count = input[i - 1][84] + input[i + 1][84] + input[i - 1][83] + input[i][83] + input[i + 1][83] +
					input[i - 1][0] + input[i][0] + input[i + 1][0];
			}

			else //General case for all cells except those which are mentioned above.
			{
				count = input[i - 1][j] + input[i][j - 1] + input[i + 1][j] + input[i][j + 1] + input[i - 1][j + 1]
					+ input[i + 1][j - 1] + input[i - 1][j - 1] + input[i + 1][j + 1];
			}

			//Condition for cells: 
			if (count < 2 || count > 3) //The cell dies.
				temp[i][j] = 0;

			if (count == 2) //The cell stays the same.
				temp[i][j] = input[i][j];

			if (count == 3)	//The cell either stays alive, or is "born".
				temp[i][j] = 1;
		}
	}

	memcpy(input, temp, sizeof(temp));   //Copies the completed temp array back to the main array.
}

//Start and End Messages.
void start(void)
{
	// PrintS Welcome Message
	consolecolor(13);
	printf("\t\t\t\t%c", 201);
	for (int i = 0; i < 45; i++)
	{
		printf("%c", 205);
	}
	printf("%c", 187); puts("");
	printf("\t\t\t\t%c ******************************************* %c\n", 186, 186);
	printf("\t\t\t\t%c |G| |A| |M| |E|   |O| |F|   |L| |I| |F| |E| %c\n", 186, 186);
	printf("\t\t\t\t%c ******************************************* %c\n", 186, 186);
	printf("\t\t\t\t%c", 200);
	for (int i = 0; i < 45; i++)
	{
		printf("%c", 205);
	}
	printf("%c", 188); puts(""); puts("");
	consolecolor(3);
	puts("Welcome to the Game of Life!");
	puts("Introduction to Programming - Semester Project");
	consolecolor(8);
}
void end(void)
{
	consolecolor(11);
	curpos(0, 15);
	printf("\t\t\t\t\t%c", 201);
	for (int i = 0; i < 45; i++)
	{
		printf("%c", 205);
	}
	printf("%c", 187); puts("");
	printf("\t\t\t\t\t%c ******************************************* %c\n", 186, 186);
	printf("\t\t\t\t\t%c           |IT WAS FUN PROGRAMMING|          %c\n", 186, 186);
	printf("\t\t\t\t\t%c                  |GOODBYE|                  %c\n", 186, 186);
	printf("\t\t\t\t\t%c ******************************************* %c\n", 186, 186);
	printf("\t\t\t\t\t%c", 200);
	for (int i = 0; i < 45; i++)
	{
		printf("%c", 205);
	}
	printf("%c", 188);
	Sleep(550);
	system("cls");

}






